
-The format string is a String which may contain fixed text and one or more embedded format specifiers.



-The format specifiers for general, character, and numeric types have the following syntax: 

   %[argument_index$][flags][width][.precision]conversion

-The optional argument_index is a decimal integer indicating the position of the argument in the argument list. The first argument is referenced by "1$", the second by "2$", etc. 
-The optional flags is a set of characters that modify the output format. The set of valid flags depends on the conversion. 
-The optional width is a non-negative decimal integer indicating the minimum number of characters to be written to the output. 
-The optional precision is a non-negative decimal integer usually used to restrict the number of characters. The specific behavior depends on the conversion. 
-The required conversion is a character indicating how the argument should be formatted. The set of valid conversions for a given argument depends on the argument's data type. 



-The format specifiers which do not correspond to arguments have the following syntax: 

   %[flags][width]conversion

-The optional flags and width is defined as above. 
-The required conversion is a character indicating content to be inserted in the output. 
--------------------------------------------------------------------------------
types of arguments:

-character argument - char, Character, byte, Byte, short, and Short
-integer argument - byte, Byte, short, Short, int and Integer, long, Long
-floating point argument - float, Float, double, Double
-------------------------------------------------------------------------------- 
conversion:


'b', 'B'	:	any argument	:	If the argument arg is null, then the result is "false". If arg is a boolean or Boolean, then the result is the string returned by String.valueOf(). Otherwise, the result is "true".   

's', 'S'	:	any argument	:	If the argument arg is null, then the result is "null". If arg implements Formattable, then arg.formatTo is invoked. Otherwise, the result is obtained by invoking arg.toString().  

'c', 'C'	:	character argument	:	The result is a Unicode character  

'd'	:	integer argument	:	The result is formatted as a decimal integer

'f'	:	floating point argument	:	The result is formatted as a decimal number  

'%'	:	The result is a literal '%' ('\u0025')  

'n'	:	The result is the platform-specific line separator  

--------------------------------------------------------------------------------
flags :


'-'	:	any argument	:	The result will be left-justified. 

'#'	:	floating point argument	:	The result should use a conversion-dependent alternate form 

'0'	:	integer argument, floating point argument	:	The result will be zero-padded

'+'	:	'd' applied to integer argument, floating point argument	:	The result will always include a sign 

' '	:	'd' applied to integer argument, floating point argument	:	The result will include a leading space for positive values 

','	:	'd' applied to integer argument, 'f' applied to floating point argument	:	The result will include locale-specific grouping separators

'('	:	'd' applied to integer argument, 'f' applied to floating point argument	:	The result will enclose negative numbers in parentheses 
--------------------------------------------------------------------------------
width :

The width is the minimum number of characters to be written to the output. For the line separator conversion, width is not applicable; if it is provided, an exception will be thrown. 
--------------------------------------------------------------------------------
precision :

For general argument types, the precision is the maximum number of characters to be written to the output. 

For the floating-point conversion 'f' the precision is the number of digits after the decimal separator.

For character, integral, percent and line separator conversions, the precision is not applicable; if a precision is provided, an exception will be thrown. 
--------------------------------------------------------------------------------