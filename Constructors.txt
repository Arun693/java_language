-Constructors can use any access modifier, including private. (A private constructor means only code within the class itself can instantiate an object of that type, so if the private constructor class wants to allow an instance of the class to be used, the class must provide a static method or variable thatallows access to an instance created from within the class.)

-constructors cannot be static, final or abstract.

-The constructor name must match the name of the class.

-Constructors must not have a return type.

-It's legal to have a method with the same name as the class, but that doesn't make it a constructor. If you see a return type, it's a method rather than a constructor. 

-If you don't type a constructor into your class code, a no-arg constructor will be automatically generated by the compiler.

-If any constructor is declared in the class, the compiler doesn't provide no-arg constructor ...eg. 
class Demo{} has a no-arg constructor.
class Demo{Demo(String name){}}doesn't have a no-arg constructor
class Demo{Demo(String name){}  Demo(){}} has a no-arg constructor

-Every constructor has, as its first statement should either be a call to an overloaded constructor (this()) or a call to the superclass constructor (super()). If non is present, the compiler inserts 'super()'. Thus this() or super() if present can only be the first statement in a constructor. this() and super() can only be present in a constructor.

-You cannot make a call to an instance method, or access an instance variable, until after the super constructor runs. Thus you cannot access instance members as part of the call to super or this. This is because they are inaccessible until the super constructor runs. However static members can be accessed as part of call to super or this. Thus super(instancemethod()) is illegal and this(Animal.staticmethod()) is legal

-Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.

-Interfaces do not have constructors. Interfaces are not part of an object's inheritance tree.

-The only way a constructor can be invoked is from within another constructor and that too using this() or super().
--------------------------------------------------------------------------------
class Foo2 {

	// legal constructors
	Foo2() { }
	private Foo2(byte b) { }
	Foo2(int x) { }
	Foo2(int x, int... y) { }


	// illegal constructors
	void Foo2() { } // it's a method, not a constructor
	Foo() { } // not a method or a constructor
	Foo2(short s); // looks like an abstract method
	static Foo2(float f) { } // can't be static
	final Foo2(long x) { } // can't be final
	abstract Foo2(char c) { } // can't be abstract
	Foo2(int... x, int t) { } // bad var-arg syntax
}